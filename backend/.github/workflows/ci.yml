name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests with coverage
      run: |
        mvn clean test jacoco:report
        mvn jacoco:check
      env:
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_URL: jdbc:postgresql://localhost:5432/test_db
        SPRING_PROFILES_ACTIVE: test
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Generate coverage badge
      run: |
        COVERAGE=$(grep -o '<counter type="LINE" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | head -1)
        MISSED=$(echo $COVERAGE | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*')
        COVERED=$(echo $COVERAGE | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*')
        TOTAL=$((MISSED + COVERED))
        PERCENTAGE=$((COVERED * 100 / TOTAL))
        echo "Coverage: $PERCENTAGE%"
        echo "COVERAGE_PERCENTAGE=$PERCENTAGE" >> $GITHUB_ENV

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Start application
      run: |
        mvn spring-boot:run -Dspring-boot.run.profiles=test &
        sleep 60
      env:
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_URL: jdbc:postgresql://localhost:5432/test_db
        SPRING_PROFILES_ACTIVE: test
    
    - name: Install Newman
      run: npm install -g newman
    
    - name: Run E2E tests with Newman
      run: |
        newman run postman/Mortgage-Portal-API.postman_collection.json \
          -e postman/Mortgage-Portal-Environment.postman_environment.json \
          --reporters cli,junit \
          --reporter-junit-export newman-results.xml
    
    - name: Upload Newman results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: newman-results
        path: newman-results.xml

  build:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Build application
      run: mvn clean package -DskipTests
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: application-jar
        path: target/*.jar

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Mortgage Portal Backend'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
          --enableExperimental
          --failOnCVSS 8
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: reports/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: application-jar
        path: target/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: docker build, push to registry, deploy to staging cluster
