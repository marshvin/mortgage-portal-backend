{
	"info": {
		"_postman_id": "550e8400-e29b-41d4-a716-446655440000",
		"name": "Mortgage Portal API",
		"description": "Complete E2E test collection for Mortgage Portal Backend API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Generate JWT Token - Applicant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate JWT token for applicant",
									"const payload = {",
									"    sub: \"applicant@example.com\",",
									"    roles: [\"APPLICANT\"]",
									"};",
									"",
									"const secret = \"my-very-secret-key-for-jwt-signing-1234567890\";",
									"const token = jwt.sign(payload, secret, { expiresIn: '1h' });",
									"",
									"pm.environment.set(\"applicant_jwt\", token);",
									"pm.test(\"JWT token generated for applicant\", function () {",
									"    pm.expect(token).to.not.be.null;",
									"    pm.expect(token).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/generate-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"generate-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate JWT Token - Officer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate JWT token for officer",
									"const payload = {",
									"    sub: \"officer@example.com\",",
									"    roles: [\"OFFICER\"]",
									"};",
									"",
									"const secret = \"my-very-secret-key-for-jwt-signing-1234567890\";",
									"const token = jwt.sign(payload, secret, { expiresIn: '1h' });",
									"",
									"pm.environment.set(\"officer_jwt\", token);",
									"pm.test(\"JWT token generated for officer\", function () {",
									"    pm.expect(token).to.not.be.null;",
									"    pm.expect(token).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/generate-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"generate-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Applications",
			"item": [
				{
					"name": "Create Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('amount');",
									"    pm.expect(jsonData).to.have.property('loanTermMonths');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('PENDING');",
									"});",
									"",
									"// Store application ID for subsequent requests",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"application_id\", jsonData.id);",
									"",
									"pm.test(\"Application ID is stored\", function () {",
									"    pm.expect(pm.environment.get(\"application_id\")).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{applicant_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 100000,\n    \"loanTermMonths\": 240\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/applications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Application by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Application ID matches\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"application_id\"));",
									"});",
									"",
									"pm.test(\"Application data is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.amount).to.eql(100000);",
									"    pm.expect(jsonData.loanTermMonths).to.eql(240);",
									"    pm.expect(jsonData.status).to.eql('PENDING');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{applicant_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/applications/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Applications (Officer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Array contains applications\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{officer_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/applications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Application updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.amount).to.eql(150000);",
									"    pm.expect(jsonData.loanTermMonths).to.eql(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{applicant_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 150000,\n    \"loanTermMonths\": 300\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/applications/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Documents",
			"item": [
				{
					"name": "Create Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Document created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('fileName');",
									"    pm.expect(jsonData).to.have.property('fileType');",
									"    pm.expect(jsonData).to.have.property('fileSize');",
									"    pm.expect(jsonData).to.have.property('presignedUrl');",
									"    pm.expect(jsonData.fileName).to.eql('bank_statement.pdf');",
									"    pm.expect(jsonData.fileType).to.eql('pdf');",
									"});",
									"",
									"// Store document ID for subsequent requests",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"document_id\", jsonData.id);",
									"",
									"pm.test(\"Document ID is stored\", function () {",
									"    pm.expect(pm.environment.get(\"document_id\")).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{applicant_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"applicationId\": \"{{application_id}}\",\n    \"fileName\": \"bank_statement.pdf\",\n    \"fileType\": \"pdf\",\n    \"fileSize\": 2048576,\n    \"presignedUrl\": \"https://s3.amazonaws.com/bucket/bank_statement.pdf?signature=abc123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/documents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Documents by Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Array contains documents\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{applicant_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/applications/{{application_id}}/documents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{application_id}}",
								"documents"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Decisions",
			"item": [
				{
					"name": "Approve Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Decision created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('comments');",
									"    pm.expect(jsonData.status).to.eql('APPROVED');",
									"    pm.expect(jsonData.comments).to.eql('Application approved after review');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{officer_jwt}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"APPROVED\",\n    \"comments\": \"Application approved after review\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/applications/{{application_id}}/decision",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{application_id}}",
								"decision"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Unauthorized Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/applications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Application ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('errorCode');",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{applicant_jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/applications/550e8400-e29b-41d4-a716-446655440000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"550e8400-e29b-41d4-a716-446655440000"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
